#Problem Statement
You are given an m x n matrix accounts where accounts[i][j] is the amount of money the i​​​​​​​​​​​th​​​​ customer has in the j​​​​​​​​​​​th​​​​ bank.

Return the wealth that the richest customer has.

Imagine every customer has multiple bank accounts, with each account holding a certain amount of money. The total wealth of a customer is calculated by summing all the money across all their multiple.

Examples
Example 1:

Input: [[5,2,3],[0,6,7]]
Expected Output: 13
Justification: The total wealth of the first customer is 10 and of the second customer is 13. So, the output is 13 as it's the maximum among all customers.
Example 2:

Input: [[1,2],[3,4],[5,6]]
Expected Output: 11
Justification: Total wealth for each customer is [3, 7, 11]. Maximum of these is 11.
Example 3:

Input: [[10,100],[200,20],[30,300]]
Expected Output: 330
Justification: Total wealth for each customer is [110, 220, 330]. The wealthiest customer has 330.
Constraints:

m == accounts.length
n == accounts[i].length
1 <= m, n <= 50
1 <= accounts[i][j] <= 100

class Solution:
    def maximumWealth(self,accounts):
        max_wealth = 0  # Initialize max_wealth to 0
        ROWS = len(accounts)
        COLS = len(accounts[0])
        for r in range(ROWS):
            current_wealth = 0 
            for c in range(COLS):
                current_wealth += accounts[r][c]
            max_wealth = max(max_wealth,current_wealth)

        return max_wealth

#Time complexity
#O(M X N)
#M -> number of customers
#N -> number of Accounts per customer
#Space complexity
#O(1)

