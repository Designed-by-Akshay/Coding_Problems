'''
You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

 

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1
 

Constraints:

n == height.length
2 <= n <= 105
0 <= height[i] <= 104
'''

class Solution:
    def maxArea(self, height: List[int]) -> int:
        max_area = float("-inf")
        left_ptr = 0 
        right_ptr = len(height) - 1

        while left_ptr <right_ptr : 
            length = right_ptr - left_ptr
            breadth = min(height[left_ptr],height[right_ptr])
            area = length * breadth
            max_area = max(area,max_area)

            if height[left_ptr] < height[right_ptr]:
                left_ptr +=1
            elif height[left_ptr] > height[right_ptr]:
                right_ptr -=1
            else:
                left_ptr +=1
                right_ptr -=1

        return max_area
#Time compelxity : O(n)
#Space complexity :O(1)
        
