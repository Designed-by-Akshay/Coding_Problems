'''
Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.

A circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n].

A subarray may only include each element of the fixed buffer nums at most once. Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.

 

Example 1:

Input: nums = [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3.
Example 2:

Input: nums = [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10.
Example 3:

Input: nums = [-3,-2,-3]
Output: -2
Explanation: Subarray [-2] has maximum sum -2.
 

Constraints:

n == nums.length
1 <= n <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
'''


class Solution:
    def maxSubarraySumCircular(self, nums: List[int]) -> int:
        max_sum = float("-inf")
        min_sum = float("inf")
        total_sum = 0
        current_sum = 0 

        for i in range(len(nums)):
            current_sum = max(current_sum,0)
            current_sum += nums[i]
            max_sum = max(max_sum,current_sum)
            total_sum += nums[i]

        current_sum = 0

        for i in range(len(nums)):
            current_sum  = min(current_sum,0)
            current_sum +=nums[i]
            min_sum = min(min_sum,current_sum)

        if total_sum == min_sum:
            # Array contains all negative
            return max_sum

        return max(max_sum, total_sum - min_sum)
        #Time complexity: O(2n)->O(n)
        #Space complexity:O(1)
        
