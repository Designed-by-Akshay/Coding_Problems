###Problem Statement
Given an input array of integers nums, find an integer array, let's call it differenceArray, of the same length as an input integer array.

Each element of differenceArray, i.e., differenceArray[i], should be calculated as follows: take the sum of all elements to the left of index i in array nums (let's call it leftSumi), and subtract it from the sum of all elements to the right of index i in array nums (let's call it rightSumi), taking the absolute value of the result:

differenceArray[i] = | leftSumi - rightSumi |

If there are no elements to the left or right of i, the corresponding sum should be taken as 0.

Examples
Example 1:

Input: nums = [2, 5, 1, 6, 1]
Expected Output: [13, 6, 0, 7, 14]
Explanation:
For i=0: |(0) - (5+1+6+1)| = |0 - 13| = 13
For i=1: |(2) - (1+6+1)| = |2 - 8| = 6
For i=2: |(2+5) - (6+1)| = |7 - 7| = 0
For i=3: |(2+5+1) - (1)| = |8 - 1| = 7
For i=4: |(2+5+1+6) - (0)| = |14 - 0| = 14
Example 2:

Input: nums = [3, 3, 3]
Expected Output: [6, 0, 6]
Explanation:
For i=0: |(0) - (3+3)| = 6
For i=1: |(3) - (3)| = 0
For i=2: |(3+3) - (0)| = 6
Example 3:

Input: nums = [1, 2, 3, 4, 5]
Expected Output: [14, 11, 6, 1, 10]
Explanation:
Calculations for each index i will follow the above-mentioned logic.
Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 105


###Solution
class Solution:
    def findDifferenceArray(self, nums):
        n = len(nums)
        
        # Handle single-element edge case
        if n == 1:
            return [0]
        
        differenceArray = [0] * n
        prefix = [0] * n
        postfix = [0] * n
        
        # Calculate prefix sums
        prefix[0] = nums[0]
        for i in range(1, n):
            prefix[i] = nums[i] + prefix[i - 1]

        # Calculate postfix sums
        postfix[n - 1] = nums[n - 1]
        for i in range(n - 2, -1, -1):
            postfix[i] = nums[i] + postfix[i + 1]
        
        # Calculate difference array
        for i in range(n):
            if i == 0:
                differenceArray[i] = abs(postfix[i + 1])
            elif i == n - 1:
                differenceArray[i] = abs(prefix[i - 1])
            else:
                differenceArray[i] = abs(prefix[i - 1] - postfix[i + 1])

        return differenceArray
#Time complexity : O(n)
#Space compelxity : O(n)



class Solution:
    def findDifferenceArray(self, nums):
        n = len(nums)
        
        # Handle single-element edge case
        if n == 1:
            return [0]
        
        total_sum = sum(nums)  
        left_sum = 0 
        right_sum = total_sum 
        
        differenceArray = [0] * n
        
        # Calculate difference array
        for i in range(n):
            right_sum -= nums[i] 
            if i == 0:
                differenceArray[i] = abs(right_sum) 
            elif i == n - 1:
                differenceArray[i] = abs(left_sum)  
            else:
                differenceArray[i] = abs(left_sum - right_sum) 
            
            left_sum += nums[i] 
        
        return differenceArray


# Time Complexity :  O(n)
# Space Complexity : O(1)
